# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddCategory_idsToFoodCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddItemsToItemEntityInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateFoodCategoryInputInput {
  id: Float
  name: String
}

input CreateItemInput {
  category: FoodCategoryInput
  createdby: UserInput
  image_data: String
  name: String
  offer: String
  price: Float
  type: Boolean
}

input CreateManyItemEntitiesInput {
  """Array of records to create"""
  itemEntities: [CreateItemInput!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUserInput!]!
}

input CreateOneFoodCategoryInput {
  """The record to create"""
  foodCategory: CreateFoodCategoryInputInput!
}

input CreateOneItemEntityInput {
  """The record to create"""
  itemEntity: CreateItemInput!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUserInput!
}

input CreateUserInput {
  createdBy: String
  id: Float
  role: String
  status: Boolean! = true
  updatedBy: String
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneItemEntityInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

type FoodCategory {
  category_ids(
    """Specify to filter the records returned."""
    filter: ItemEntityFilter! = {}

    """Specify to sort results."""
    sorting: [ItemEntitySort!]! = []
  ): [ItemEntity!]!
  id: Float!
  isActive: Boolean!
  name: String!
}

type FoodCategoryAggregateGroupBy {
  id: Float
  isActive: Boolean
  name: String
}

type FoodCategoryAvgAggregate {
  id: Float
}

type FoodCategoryCountAggregate {
  id: Int
  isActive: Int
  name: Int
}

input FoodCategoryFilter {
  and: [FoodCategoryFilter!]
  category_id: FoodCategoryFilterItemEntityFilter
  id: NumberFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [FoodCategoryFilter!]
}

input FoodCategoryFilterItemEntityFilter {
  and: [FoodCategoryFilterItemEntityFilter!]
  id: NumberFieldComparison
  name: StringFieldComparison
  offer: StringFieldComparison
  or: [FoodCategoryFilterItemEntityFilter!]
  status: BooleanFieldComparison
  type: BooleanFieldComparison
}

input FoodCategoryInput {
  id: Float
  name: String
}

type FoodCategoryMaxAggregate {
  id: Float
  name: String
}

type FoodCategoryMinAggregate {
  id: Float
  name: String
}

input FoodCategorySort {
  direction: SortDirection!
  field: FoodCategorySortFields!
  nulls: SortNulls
}

enum FoodCategorySortFields {
  id
  isActive
  name
}

type FoodCategorySumAggregate {
  id: Float
}

type ItemEntity {
  category: FoodCategory
  createdby: User
  id: Float!
  image_data: String!
  items(
    """Specify to filter the records returned."""
    filter: FoodCategoryFilter! = {}

    """Specify to sort results."""
    sorting: [FoodCategorySort!]! = []
  ): [FoodCategory!]!
  name: String!
  offer: String!
  price: Float!
  status: Boolean!
  type: Boolean!
  updatedby: User
}

type ItemEntityAggregateGroupBy {
  id: Float
  name: String
  offer: String
  status: Boolean
  type: Boolean
}

type ItemEntityAvgAggregate {
  id: Float
}

type ItemEntityCountAggregate {
  id: Int
  name: Int
  offer: Int
  status: Int
  type: Int
}

type ItemEntityDeleteResponse {
  category: FoodCategory
  createdby: User
  id: Float
  image_data: String
  name: String
  offer: String
  price: Float
  status: Boolean
  type: Boolean
  updatedby: User
}

type ItemEntityEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ItemEntity"""
  node: ItemEntity!
}

input ItemEntityFilter {
  and: [ItemEntityFilter!]
  id: NumberFieldComparison
  items: ItemEntityFilterFoodCategoryFilter
  name: StringFieldComparison
  offer: StringFieldComparison
  or: [ItemEntityFilter!]
  status: BooleanFieldComparison
  type: BooleanFieldComparison
}

input ItemEntityFilterFoodCategoryFilter {
  and: [ItemEntityFilterFoodCategoryFilter!]
  id: NumberFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [ItemEntityFilterFoodCategoryFilter!]
}

type ItemEntityMaxAggregate {
  id: Float
  name: String
  offer: String
}

type ItemEntityMinAggregate {
  id: Float
  name: String
  offer: String
}

input ItemEntitySort {
  direction: SortDirection!
  field: ItemEntitySortFields!
  nulls: SortNulls
}

enum ItemEntitySortFields {
  id
  name
  offer
  status
  type
}

type ItemEntitySumAggregate {
  id: Float
}

input ItemEntityUpdateFilter {
  and: [ItemEntityUpdateFilter!]
  id: NumberFieldComparison
  name: StringFieldComparison
  offer: StringFieldComparison
  or: [ItemEntityUpdateFilter!]
  status: BooleanFieldComparison
  type: BooleanFieldComparison
}

type Mutation {
  addCategory_idsToFoodCategory(input: AddCategory_idsToFoodCategoryInput!): FoodCategory!
  addItemsToItemEntity(input: AddItemsToItemEntityInput!): ItemEntity!
  createManyItemEntities(input: CreateManyItemEntitiesInput!): [ItemEntity!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneFoodCategory(input: CreateOneFoodCategoryInput!): FoodCategory!
  createOneItemEntity(input: CreateOneItemEntityInput!): ItemEntity!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneItemEntity(input: DeleteOneItemEntityInput!): ItemEntityDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  removeCategory_idsFromFoodCategory(input: RemoveCategory_idsFromFoodCategoryInput!): FoodCategory!
  removeItemsFromItemEntity(input: RemoveItemsFromItemEntityInput!): ItemEntity!
  setCategory_idsOnFoodCategory(input: SetCategory_idsOnFoodCategoryInput!): FoodCategory!
  setItemsOnItemEntity(input: SetItemsOnItemEntityInput!): ItemEntity!
  updateManyItemEntities(input: UpdateManyItemEntitiesInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneFoodCategory(input: UpdateOneFoodCategoryInput!): FoodCategory!
  updateOneItemEntity(input: UpdateOneItemEntityInput!): ItemEntity!
  updateOneUser(input: UpdateOneUserInput!): User!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Query {
  foodCategories(
    """Specify to filter the records returned."""
    filter: FoodCategoryFilter! = {}

    """Specify to sort results."""
    sorting: [FoodCategorySort!]! = []
  ): [FoodCategory!]!
  foodCategory(
    """The id of the record to find."""
    id: ID!
  ): FoodCategory
  getAllItem: ItemEntity!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
}

input RemoveCategory_idsFromFoodCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveItemsFromItemEntityInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetCategory_idsOnFoodCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetItemsOnItemEntityInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateFoodCategoryInputInput {
  id: Float
  isActive: Boolean!
  name: String
}

input UpdateItemInput {
  category: FoodCategoryInput
  image_data: String
  name: String
  offer: String
  price: Float
  type: Boolean
  updatedby: UserInput
}

input UpdateManyItemEntitiesInput {
  """Filter used to find fields to update"""
  filter: ItemEntityUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateItemInput!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserInput!
}

input UpdateOneFoodCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFoodCategoryInputInput!
}

input UpdateOneItemEntityInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateItemInput!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserInput!
}

input UpdateUserInput {
  createdBy: String
  id: Float
  role: String
  status: Boolean! = true
  updatedBy: String
}

type User {
  id: Float!
  role: String!
  status: Boolean!
}

type UserAggregateGroupBy {
  id: Float
  role: String
  status: Boolean
}

type UserAvgAggregate {
  id: Float
}

type UserConnection {
  """Array of edges."""
  edges: [UserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  id: Int
  role: Int
  status: Int
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  id: NumberFieldComparison
  or: [UserDeleteFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

type UserDeleteResponse {
  id: Float
  role: String
  status: Boolean
}

type UserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the User"""
  node: User!
}

input UserFilter {
  and: [UserFilter!]
  id: NumberFieldComparison
  or: [UserFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

input UserInput {
  createdBy: String
  id: Float
  role: String
  status: Boolean! = true
  updatedBy: String
}

type UserMaxAggregate {
  id: Float
  role: String
}

type UserMinAggregate {
  id: Float
  role: String
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  id
  role
  status
}

type UserSumAggregate {
  id: Float
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  id: NumberFieldComparison
  or: [UserUpdateFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}