# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateFoodCategoryInputInput {
  id: Float
  name: String
}

input CreateFoodSizeInput {
  id: Float
  name: String
}

input CreateFoodTypeInput {
  id: Float
  name: String
}

input CreateItemInput {
  category: FoodCategoryInput
  createdby: UserInput
  foodsize: FoodSizeInput
  foodtype: FoodTypeInput
  image_data: String
  name: String
  offer: String
  price: Float
  type: Boolean
}

input CreateManyItemEntitiesInput {
  """Array of records to create"""
  itemEntities: [CreateItemInput!]!
}

input CreateManyOffersInput {
  """Array of records to create"""
  offers: [CreateOfferInput!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUserInput!]!
}

input CreateOfferInput {
  createdby: UserInput
  discount: Float
  items: [OfferItemInput!]!
  name: String
  price: Float
  status: Boolean
  totalPrice: Float
}

input CreateOneFoodCategoryInput {
  """The record to create"""
  foodCategory: CreateFoodCategoryInputInput!
}

input CreateOneFoodSizeInput {
  """The record to create"""
  foodSize: CreateFoodSizeInput!
}

input CreateOneFoodTypeInput {
  """The record to create"""
  foodType: CreateFoodTypeInput!
}

input CreateOneItemEntityInput {
  """The record to create"""
  itemEntity: CreateItemInput!
}

input CreateOneOfferInput {
  """The record to create"""
  offer: CreateOfferInput!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUserInput!
}

input CreateUserInput {
  createdBy: String
  id: Float
  role: String
  status: Boolean! = true
  updatedBy: String
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input DeleteManyItemEntitiesInput {
  """Filter to find records to delete"""
  filter: ItemEntityDeleteFilter!
}

input DeleteManyOffersInput {
  """Filter to find records to delete"""
  filter: OfferDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneFoodTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneItemEntityInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOfferInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

type FoodCategory {
  id: Float!
  isActive: Boolean!
  name: String!
}

type FoodCategoryAggregateGroupBy {
  id: Float
  isActive: Boolean
  name: String
}

type FoodCategoryAvgAggregate {
  id: Float
}

type FoodCategoryCountAggregate {
  id: Int
  isActive: Int
  name: Int
}

input FoodCategoryFilter {
  and: [FoodCategoryFilter!]
  id: NumberFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [FoodCategoryFilter!]
}

input FoodCategoryInput {
  id: Float
  name: String
}

type FoodCategoryMaxAggregate {
  id: Float
  name: String
}

type FoodCategoryMinAggregate {
  id: Float
  name: String
}

input FoodCategorySort {
  direction: SortDirection!
  field: FoodCategorySortFields!
  nulls: SortNulls
}

enum FoodCategorySortFields {
  id
  isActive
  name
}

type FoodCategorySumAggregate {
  id: Float
}

type FoodSize {
  id: Float!
  isActive: Boolean!
  name: String!
}

type FoodSizeAggregateGroupBy {
  id: Float
  isActive: Boolean
  name: String
}

type FoodSizeAvgAggregate {
  id: Float
}

type FoodSizeCountAggregate {
  id: Int
  isActive: Int
  name: Int
}

input FoodSizeFilter {
  and: [FoodSizeFilter!]
  id: NumberFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [FoodSizeFilter!]
}

input FoodSizeInput {
  id: Float
  name: String
}

type FoodSizeMaxAggregate {
  id: Float
  name: String
}

type FoodSizeMinAggregate {
  id: Float
  name: String
}

input FoodSizeSort {
  direction: SortDirection!
  field: FoodSizeSortFields!
  nulls: SortNulls
}

enum FoodSizeSortFields {
  id
  isActive
  name
}

type FoodSizeSumAggregate {
  id: Float
}

type FoodType {
  id: Float!
  isActive: Boolean!
  name: String!
}

type FoodTypeAggregateGroupBy {
  id: Float
  isActive: Boolean
  name: String
}

type FoodTypeAvgAggregate {
  id: Float
}

type FoodTypeCountAggregate {
  id: Int
  isActive: Int
  name: Int
}

type FoodTypeDeleteResponse {
  id: Float
  isActive: Boolean
  name: String
}

input FoodTypeFilter {
  and: [FoodTypeFilter!]
  id: NumberFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [FoodTypeFilter!]
}

input FoodTypeInput {
  id: Float
  name: String
}

type FoodTypeMaxAggregate {
  id: Float
  name: String
}

type FoodTypeMinAggregate {
  id: Float
  name: String
}

input FoodTypeSort {
  direction: SortDirection!
  field: FoodTypeSortFields!
  nulls: SortNulls
}

enum FoodTypeSortFields {
  id
  isActive
  name
}

type FoodTypeSumAggregate {
  id: Float
}

type ItemEntity {
  category: FoodCategory
  createdby: User
  foodsize: FoodSize
  foodtype: FoodType
  id: Float!
  image_data: String
  name: String!
  offer: String!
  price: Float!
  status: Boolean!
  type: Boolean!
  updatedby: User
}

type ItemEntityAggregateGroupBy {
  id: Float
  name: String
  offer: String
  status: Boolean
  type: Boolean
}

type ItemEntityAvgAggregate {
  id: Float
}

type ItemEntityCountAggregate {
  id: Int
  name: Int
  offer: Int
  status: Int
  type: Int
}

input ItemEntityDeleteFilter {
  and: [ItemEntityDeleteFilter!]
  id: NumberFieldComparison
  name: StringFieldComparison
  offer: StringFieldComparison
  or: [ItemEntityDeleteFilter!]
  status: BooleanFieldComparison
  type: BooleanFieldComparison
}

type ItemEntityDeleteResponse {
  category: FoodCategory
  createdby: User
  foodsize: FoodSize
  foodtype: FoodType
  id: Float
  image_data: String
  name: String
  offer: String
  price: Float
  status: Boolean
  type: Boolean
  updatedby: User
}

input ItemEntityFilter {
  and: [ItemEntityFilter!]
  category: ItemEntityFilterFoodCategoryFilter
  createdby: ItemEntityFilterUserFilter
  foodsize: ItemEntityFilterFoodSizeFilter
  foodtype: ItemEntityFilterFoodTypeFilter
  id: NumberFieldComparison
  name: StringFieldComparison
  offer: StringFieldComparison
  or: [ItemEntityFilter!]
  status: BooleanFieldComparison
  type: BooleanFieldComparison
  updatedby: ItemEntityFilterUserFilter
}

input ItemEntityFilterFoodCategoryFilter {
  and: [ItemEntityFilterFoodCategoryFilter!]
  id: NumberFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [ItemEntityFilterFoodCategoryFilter!]
}

input ItemEntityFilterFoodSizeFilter {
  and: [ItemEntityFilterFoodSizeFilter!]
  id: NumberFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [ItemEntityFilterFoodSizeFilter!]
}

input ItemEntityFilterFoodTypeFilter {
  and: [ItemEntityFilterFoodTypeFilter!]
  id: NumberFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [ItemEntityFilterFoodTypeFilter!]
}

input ItemEntityFilterUserFilter {
  and: [ItemEntityFilterUserFilter!]
  id: NumberFieldComparison
  or: [ItemEntityFilterUserFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

type ItemEntityMaxAggregate {
  id: Float
  name: String
  offer: String
}

type ItemEntityMinAggregate {
  id: Float
  name: String
  offer: String
}

input ItemEntitySort {
  direction: SortDirection!
  field: ItemEntitySortFields!
  nulls: SortNulls
}

enum ItemEntitySortFields {
  id
  name
  offer
  status
  type
}

type ItemEntitySumAggregate {
  id: Float
}

input ItemEntityUpdateFilter {
  and: [ItemEntityUpdateFilter!]
  id: NumberFieldComparison
  name: StringFieldComparison
  offer: StringFieldComparison
  or: [ItemEntityUpdateFilter!]
  status: BooleanFieldComparison
  type: BooleanFieldComparison
}

type Mutation {
  createManyItemEntities(input: CreateManyItemEntitiesInput!): [ItemEntity!]!
  createManyOffers(input: CreateManyOffersInput!): [Offer!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneFoodCategory(input: CreateOneFoodCategoryInput!): FoodCategory!
  createOneFoodSize(input: CreateOneFoodSizeInput!): FoodSize!
  createOneFoodType(input: CreateOneFoodTypeInput!): FoodType!
  createOneItemEntity(input: CreateOneItemEntityInput!): ItemEntity!
  createOneOffer(input: CreateOneOfferInput!): Offer!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyItemEntities(input: DeleteManyItemEntitiesInput!): DeleteManyResponse!
  deleteManyOffers(input: DeleteManyOffersInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneFoodType(input: DeleteOneFoodTypeInput!): FoodTypeDeleteResponse!
  deleteOneItemEntity(input: DeleteOneItemEntityInput!): ItemEntityDeleteResponse!
  deleteOneOffer(input: DeleteOneOfferInput!): OfferDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  updateManyItemEntities(input: UpdateManyItemEntitiesInput!): UpdateManyResponse!
  updateManyOffers(input: UpdateManyOffersInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneFoodCategory(input: UpdateOneFoodCategoryInput!): FoodCategory!
  updateOneFoodSize(input: UpdateOneFoodSizeInput!): FoodSize!
  updateOneFoodType(input: UpdateOneFoodTypeInput!): FoodType!
  updateOneItemEntity(input: UpdateOneItemEntityInput!): ItemEntity!
  updateOneOffer(input: UpdateOneOfferInput!): Offer!
  updateOneUser(input: UpdateOneUserInput!): User!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type Offer {
  createdby: User
  discount: Float!
  id: ID!
  items: [OfferItem!]
  name: String!
  price: Float!
  status: Boolean!
  totalPrice: Float!
  updatedby: User
}

type OfferAggregateGroupBy {
  discount: Float
  name: String
  price: Float
  status: Boolean
  totalPrice: Float
}

type OfferAvgAggregate {
  discount: Float
  price: Float
  totalPrice: Float
}

type OfferCountAggregate {
  discount: Int
  name: Int
  price: Int
  status: Int
  totalPrice: Int
}

input OfferDeleteFilter {
  and: [OfferDeleteFilter!]
  discount: NumberFieldComparison
  name: StringFieldComparison
  or: [OfferDeleteFilter!]
  price: NumberFieldComparison
  status: BooleanFieldComparison
  totalPrice: NumberFieldComparison
}

type OfferDeleteResponse {
  createdby: User
  discount: Float
  id: ID
  items: [OfferItem!]
  name: String
  price: Float
  status: Boolean
  totalPrice: Float
  updatedby: User
}

input OfferFilter {
  and: [OfferFilter!]
  createdby: OfferFilterUserFilter
  discount: NumberFieldComparison
  name: StringFieldComparison
  or: [OfferFilter!]
  price: NumberFieldComparison
  status: BooleanFieldComparison
  totalPrice: NumberFieldComparison
  updatedby: OfferFilterUserFilter
}

input OfferFilterUserFilter {
  and: [OfferFilterUserFilter!]
  id: NumberFieldComparison
  or: [OfferFilterUserFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

type OfferItem {
  category: FoodCategory
  id: ID!
  image_data: String
  name: String!
  quantity: Float
  selected: Boolean
  status: Boolean!
}

input OfferItemInput {
  category: FoodCategoryInput
  id: Float
  image_data: String
  name: String
  quantity: Float
  selected: Boolean
}

type OfferMaxAggregate {
  discount: Float
  name: String
  price: Float
  totalPrice: Float
}

type OfferMinAggregate {
  discount: Float
  name: String
  price: Float
  totalPrice: Float
}

input OfferSort {
  direction: SortDirection!
  field: OfferSortFields!
  nulls: SortNulls
}

enum OfferSortFields {
  discount
  name
  price
  status
  totalPrice
}

type OfferSumAggregate {
  discount: Float
  price: Float
  totalPrice: Float
}

input OfferUpdateFilter {
  and: [OfferUpdateFilter!]
  discount: NumberFieldComparison
  name: StringFieldComparison
  or: [OfferUpdateFilter!]
  price: NumberFieldComparison
  status: BooleanFieldComparison
  totalPrice: NumberFieldComparison
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Query {
  foodCategories(
    """Specify to filter the records returned."""
    filter: FoodCategoryFilter! = {}

    """Specify to sort results."""
    sorting: [FoodCategorySort!]! = []
  ): [FoodCategory!]!
  foodCategory(
    """The id of the record to find."""
    id: ID!
  ): FoodCategory
  foodSize(
    """The id of the record to find."""
    id: ID!
  ): FoodSize
  foodSizes(
    """Specify to filter the records returned."""
    filter: FoodSizeFilter! = {}

    """Specify to sort results."""
    sorting: [FoodSizeSort!]! = []
  ): [FoodSize!]!
  foodType(
    """The id of the record to find."""
    id: ID!
  ): FoodType
  foodTypes(
    """Specify to filter the records returned."""
    filter: FoodTypeFilter! = {}

    """Specify to sort results."""
    sorting: [FoodTypeSort!]! = []
  ): [FoodType!]!
  getItems: [ItemEntity!]!
  itemEntities(
    """Specify to filter the records returned."""
    filter: ItemEntityFilter! = {}

    """Specify to sort results."""
    sorting: [ItemEntitySort!]! = []
  ): [ItemEntity!]!
  itemEntity(
    """The id of the record to find."""
    id: ID!
  ): ItemEntity
  offer(
    """The id of the record to find."""
    id: ID!
  ): Offer
  offers(
    """Specify to filter the records returned."""
    filter: OfferFilter! = {}

    """Specify to sort results."""
    sorting: [OfferSort!]! = []
  ): [Offer!]!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateFoodCategoryInputInput {
  id: Float
  isActive: Boolean
  name: String
}

input UpdateFoodSizeInput {
  id: Float
  isActive: Boolean
  name: String
}

input UpdateFoodTypeInput {
  id: Float
  isActive: Boolean
  name: String
}

input UpdateItemInput {
  category: FoodCategoryInput
  foodsize: FoodSizeInput
  foodtype: FoodTypeInput
  image_data: String
  name: String
  offer: String
  price: Float
  status: Boolean
  type: Boolean
  updatedby: UserInput
}

input UpdateManyItemEntitiesInput {
  """Filter used to find fields to update"""
  filter: ItemEntityUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateItemInput!
}

input UpdateManyOffersInput {
  """Filter used to find fields to update"""
  filter: OfferUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOfferInput!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserInput!
}

input UpdateOfferInput {
  discount: Float
  items: [OfferItemInput!]
  name: String
  price: Float
  status: Boolean
  totalPrice: Float
  updatedby: UserInput
}

input UpdateOneFoodCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFoodCategoryInputInput!
}

input UpdateOneFoodSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFoodSizeInput!
}

input UpdateOneFoodTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFoodTypeInput!
}

input UpdateOneItemEntityInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateItemInput!
}

input UpdateOneOfferInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOfferInput!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserInput!
}

input UpdateUserInput {
  createdBy: String
  id: Float
  role: String
  status: Boolean! = true
  updatedBy: String
}

type User {
  id: Float!
  role: String!
  status: Boolean!
}

type UserAggregateGroupBy {
  id: Float
  role: String
  status: Boolean
}

type UserAvgAggregate {
  id: Float
}

type UserConnection {
  """Array of edges."""
  edges: [UserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  id: Int
  role: Int
  status: Int
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  id: NumberFieldComparison
  or: [UserDeleteFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

type UserDeleteResponse {
  id: Float
  role: String
  status: Boolean
}

type UserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the User"""
  node: User!
}

input UserFilter {
  and: [UserFilter!]
  id: NumberFieldComparison
  or: [UserFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

input UserInput {
  createdBy: String
  id: Float
  role: String
  status: Boolean! = true
  updatedBy: String
}

type UserMaxAggregate {
  id: Float
  role: String
}

type UserMinAggregate {
  id: Float
  role: String
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  id
  role
  status
}

type UserSumAggregate {
  id: Float
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  id: NumberFieldComparison
  or: [UserUpdateFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}